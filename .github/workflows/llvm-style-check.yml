name: LLVM Style Check

on:
  pull_request_target:
    branches: [main]

jobs:
  clang-format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Install clang-format-18
        run: |
          echo "::group::üîß Installing LLVM 18"
          wget -q https://apt.llvm.org/llvm.sh  
          chmod +x llvm.sh
          sudo ./llvm.sh 18 > /dev/null 2>&1
          sudo apt-get install -y clang-format-18
          sudo ln -sf /usr/bin/clang-format-18 /usr/bin/clang-format
          echo "::endgroup::"

      - name: Verify environment
        run: |
          echo "::group::üîç Environment Verification"
          echo "Clang-Format Path: $(which clang-format)"
          clang-format --version
          echo "Current directory: $(pwd)"
          echo "Directory structure:"
          tree -L 2 -I '.git|.github'
          echo "::endgroup::"

      - name: Check .clang-format configuration
        run: |
          echo "::group::üìù Checking .clang-format file"
          if [ ! -f .clang-format ]; then
            echo "BasedOnStyle: LLVM" > .clang-format
          fi
          cat .clang-format
          echo "::endgroup::"

      - name: Run enhanced clang-format check
        run: |
          echo "::group::üîé Changed Files Detection"
          # Get the accurate comparison range
          BASE_REF=${{ github.event.pull_request.base.ref }}  # Target branch (e.g., main)
          HEAD_REF=${{ github.event.pull_request.head.ref }}  # Source branch

          # Fetch the target branch code
          git fetch origin $BASE_REF
          git checkout -b base_branch FETCH_HEAD

          # Switch back to the PR branch
          git checkout $HEAD_REF

          # Generate the list of changed files
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRTUXB base_branch...HEAD)
          printf "Changed files:\n%s\n" "$CHANGED_FILES"
          echo "::endgroup::"

          echo "::group::üö¶ Formatting Check Process"
          ERROR_FOUND=0
          IFS=$'\n'

          for FILE in $CHANGED_FILES; do
            if [[ "$FILE" =~ \.(c|cc|cpp|cxx|h|hh|hpp|hxx)$ ]]; then
              echo "üìÑ Processing: $FILE"
              
              # Verify if the file exists
              if [ ! -f "$FILE" ]; then
                echo "::error file=$FILE::File not found!"
                ERROR_FOUND=1
                continue
              fi

              TEMP_FILE="${FILE}.formatted"
              clang-format -style=file --assume-filename="$FILE" "$FILE" > "$TEMP_FILE"

              # Show full path differences
              if ! diff -u --color=always "$(pwd)/$FILE" "$TEMP_FILE"; then
                echo "::error file=$FILE,title=Style Issue::Code style violation detected"
                echo "‚ùå Error in $FILE"
                echo "üí° Suggested fix:"
                echo "======================================"
                clang-format -style=file "$FILE" | diff -u --color=always "$FILE" - || true
                echo "======================================"
                ERROR_FOUND=1
              fi

              rm -f "$TEMP_FILE"
              echo "----------------------------------------"
            else
              echo "‚è© Skipping non-C++ file: $FILE"
            fi
          done

          if [ $ERROR_FOUND -eq 1 ]; then
            echo "‚ùå Check failed: Found $ERROR_FOUND files with style issues"
            exit 1
          else
            echo "‚úÖ All files passed style check"
          fi
          echo "::endgroup::"
