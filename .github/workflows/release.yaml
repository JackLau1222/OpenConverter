name: Release 

on:
  release:
    types:
      - created
  push:
    tags:
      - "v*.*.*"
  # push:
  #   branches:
  #     - 'main'
  # pull_request:
  #   branches:
  #     - '**'

jobs:
  build:
    runs-on: ubuntu-20.04  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Checkout BMF repository (specific branch)
      run: |
        sudo apt update
        sudo apt install -y make git pkg-config libssl-dev cmake binutils-dev libgoogle-glog-dev gcc g++ golang wget libgl1
        sudo apt install -y python3.9 python3-dev python3-pip libsndfile1 libsndfile1-dev
        # sudo python3 -m pip install timeout_decorator numpy onnxruntime pytest opencv-python librosa
        
        git clone https://github.com/JackLau1222/bmf.git

    # - name: Cache FFmpeg build
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       /usr/local/bin/ffmpeg
    #       /usr/local/lib/
    #       /usr/local/include/
    #     key: ${{ runner.os }}-ffmpeg-${{ hashFiles('bmf/scripts/build_ffmpeg.sh') }}
    #     restore-keys: |
    #       ${{ runner.os }}-ffmpeg-

    # - name: Cache BMF build
    #   uses: actions/cache@v3
    #   with:
    #     path: bmf/output/
    #     key: ${{ runner.os }}-bmf-${{ hashFiles('bmf/build.sh') }}
    #     restore-keys: |
    #       ${{ runner.os }}-bmf-

    - name: Compile FFmpeg and BMF if not cached
      run: |
        if [ ! -f "/usr/local/bin/ffmpeg" ]; then
          echo "FFmpeg not found, starting build..."
          (cd bmf && git checkout fork_by_oc && sudo scripts/build_ffmpeg.sh nasm yasm x264 x265 opus && ./build.sh )
        else
          echo "FFmpeg is already installed, skipping build."
        fi

    - name: Set up BMF
      run: |
        cd bmf
        echo "C_INCLUDE_PATH=${C_INCLUDE_PATH}:$(pwd)/output/bmf/include" >> $GITHUB_ENV
        echo "CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:$(pwd)/output/bmf/include" >> $GITHUB_ENV
        echo "LIBRARY_PATH=${LIBRARY_PATH}:$(pwd)/output/bmf/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/output/bmf/lib" >> $GITHUB_ENV


    - name: Set up Qt
      run: |
        sudo apt-get install -y qt5-qmake qtbase5-dev qtchooser qtbase5-dev-tools cmake build-essential

    - name: Build with CMake
      run: |
        (cd src && cmake -B build && cd build && make -j$(nproc))
    
    # - name: Start tmate session for debugging
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     sudo: true
    #     duration: 7200

    - name: Copy libs
      run: |
        # linuxdeployqt
        sudo apt-get -y install git g++ libgl1-mesa-dev
        git clone https://github.com/probonopd/linuxdeployqt.git
        # Then build in Qt Creator, or use
        export PATH=$(readlink -f /tmp/.mount_QtCreator-*-x86_64/*/gcc_64/bin/):$PATH
        (cd linuxdeployqt && qmake && make && sudo make install)
        # patchelf
        wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.bz2
        tar xf patchelf-0.9.tar.bz2
        ( cd patchelf-0.9/ && ./configure  && make && sudo make install )
        # appimage
        sudo wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -O /usr/local/bin/appimagetool
        sudo chmod a+x /usr/local/bin/appimagetool
        (linuxdeployqt/bin/linuxdeployqt ./src/build/OpenConverter -appimage)
      continue-on-error: true
        

    - name: Copy runtime
      run: |
        # mkdir /src/build/lib
        cp /usr/local/lib/libswscale.so.6 src/build/lib
        cp /usr/local/lib/libavfilter.so.8 src/build/lib
        cp /usr/local/lib/libpostproc.so.56 src/build/lib
        cp bmf/output/bmf/lib/libbuiltin_modules.so src/build/lib
        cp bmf/output/bmf/BUILTIN_CONFIG.json src/build
        touch src/build/activate_env.sh
        echo export LD_LIBRARY_PATH="./lib" >> src/build/activate_env.sh

    # Step to package the build directory
    - name: Create tar.gz package
      run: |
        # VERSION="1.3"
        BUILD_DIR="src/build"
        PACKAGE_NAME="OpenConverter_Linux_x86.tar.gz"
        OUTPUT_DIR="OpenConverter_Linux_x86"
        mkdir -p $OUTPUT_DIR
        cp -r $BUILD_DIR/* $OUTPUT_DIR/
        tar -czvf $PACKAGE_NAME -C $OUTPUT_DIR .
        rm -rf $OUTPUT_DIR

    # Step to upload the tar.gz package as an artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: OpenConverter_Linux_x86
        path: OpenConverter_Linux_x86.tar.gz


    - name: Get GitHub Release information
      id: release_info
      run: echo "::set-output name=release_tag::$(echo ${GITHUB_REF#refs/tags/})"


    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ./build/OpenConverter_Linux_x86.tar.gz

    - name: Finish
      run: echo "Release upload complete"